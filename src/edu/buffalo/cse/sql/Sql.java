/* Generated By:JavaCC: Do not edit this line. Sql.java */
 package edu.buffalo.cse.sql;

import java.util.ArrayList;
import java.util.HashMap;
import java.util.Map;
import java.util.List;
import java.io.File;
import java.io.FileNotFoundException;

import edu.buffalo.cse.sql.Schema;
import edu.buffalo.cse.sql.data.Datum;
import edu.buffalo.cse.sql.plan.*;
import edu.buffalo.cse.sql.io.Readtable;
import java.util.regex.*;
import edu.buffalo.cse.sql.parser.*;

public class Sql {

  public static void main( String[] args )
  {
    System.out.println("You haven't implemented me yet!");
    
  }

  public static List<Datum[]> execQuery(
      Map<String, Schema.TableFromFile> tables,
      PlanNode q
    )
    throws SqlException
    { 
	  ArrayList<PlanNode> pl=new ArrayList<PlanNode>(); //the arraylist records the nodes of the tree [1]
	  ArrayList indexpl=new ArrayList(); //the arraylist records the structure of the tree [2]
	  int root=1;
	  int i=0;
	  int j=0;
	  int j0=1;
	  int in=0;//index in the tree
	  pl.add(q);
	  indexpl.add(root);// recording the tree relationship
	  PlanNode q1;
	  PlanNode q3;
	  PlanNode ql;
	  PlanNode qr;

	  while (j0>j)//no new nodes are found
	  {
		  for (int k=j+1;k<=j0;k++){
			  q1=pl.get(k-1);
			  in=(Integer) indexpl.get(k-1);
			  int m=1;
		  switch (q1.type){
		  case AGGREGATE:
			  j=pl.size();
			  AggregateNode q2=(AggregateNode)q1;
			  q3=q2.getChild();
			  pl.add(q3);
			  indexpl.add(in*10+m);
			  m=m+1;
			  break;
		  case PROJECT:
			  j=pl.size();
			  ProjectionNode q21=(ProjectionNode)q1;
			  q3=q21.getChild();
			  pl.add(q3);
			  indexpl.add(in*10+m);
			  m=m+1;
			  break;
		  case SELECT:
			  j=pl.size();
			  SelectionNode q22=(SelectionNode)q1;
			  q3=q22.getChild();
			  pl.add(q3);
			  indexpl.add(in*10+m);
			  m=m+1;
			  break;
		  case JOIN:
			  j=pl.size();
			  JoinNode q23=(JoinNode)q1;
			  ql=q23.getLHS();
			  qr=q23.getRHS();
			  pl.add(ql);
			  indexpl.add(in*10+m);
			  m=m+1;
			  pl.add(qr);
			  indexpl.add(in*10+m);
			  m=m+1;
			  break;
		  case UNION: 
			  j=pl.size();
			  UnionNode q25=(UnionNode)q1;
			  ql=q25.getLHS();
			  qr=q25.getRHS();
			  pl.add(ql);
			  indexpl.add(in*10+m);
			  m=m+1;
			  pl.add(qr);
			  indexpl.add(in*10+m);
			  m=m+1;
			  break;
		  case NULLSOURCE:
			  j=pl.size();
			  indexpl.add(in*10+m);
			  m=m+1;
			  //i=1;
			  break;
		  case SCAN: 
			  j=pl.size();
			  indexpl.add(in*10+m);
			  m=m+1;
			  //i=1;
			  break;
		  }
		  }
		  j0=pl.size();
	  }
	  int s=pl.size();
	  int jointimes=0;
	  int indi[] =new int [s];//if the child node has provided some useful information
	  ArrayList data=new ArrayList();// the third arraylist, which records the data associated with node [3]
	  ArrayList COLNAMES=new ArrayList();//record the column names of the arraylist "data"
	  ArrayList RANGENAMES=new ArrayList();// record the range names of the arraylist "data"
	  for (int k1=0;k1<s;k1++) 
	  {
		  ArrayList <String []> data1=new ArrayList  ();
		  data.add(data1);
		  COLNAMES.add(data1);
		  RANGENAMES.add(data1);
	  }
	  ArrayList  table=new ArrayList ();
	  for (int k5=s;k5>=1;k5--){
		 // if (indi[k]==0){
			  in=(Integer) indexpl.get(k5-1);
			  //if (indexpl.contains(in-1))// this is one of the binary child nodes
			  //{}
			  //else //this is a unary child node or its father node is unary
			  //{
				  q1=pl.get(k5-1);
				  
				  switch (q1.type){
				  case SCAN:
					  String q1s=q1.detailString();
					  int a= q1s.indexOf("[");
					  int b= q1s.indexOf("(");
					  int c1=q1s.indexOf(")");
					  String rangeVar=q1s.substring(a+1, b);
					  String col1=q1s.substring(b+1,b+2);
					  String col2=q1s.substring(c1-1,c1);	 
					  q1s=q1s.trim();
					  table.add(in);
					  table.add(rangeVar);
					  table.add(col1);
					  table.add(col2);
					  int i341=indexpl.indexOf(in);//this child node can provide data to its father node
					  indi[i341]=1;
					  break;
				  case AGGREGATE:
					  String q2s=q1.detailString();
					  
					  int i1=0;
					  int i2=0;
					  int index1=-100;
					  int cal=0; //calculation number in AGGREGATE
					  String arraytotal[][]=new String [0][0];
					  String [] colnames2=new String [0];
					  ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
					  ArrayList<Datum> ret12=new ArrayList<Datum>();
					  if (q2s.contains("SUM"))
					  {
						  int a1= q2s.indexOf("M");
						  int b1= q2s.indexOf(")");
						  i1=0;
						  i2=0;
						  index1=-100;
						  String parString=q2s.substring(a1+1,b1);
						  if (parString.contains("+")){
							  int id1=0;
							  int id2=0;
							  int a111=parString.indexOf("+");
							  String leftCol=parString.substring(a111-2,a111-1);
							  String righCol=parString.substring(a111+2,a111+3);
							  
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(leftCol)){
									  id1=i123;
								  }
								  if (colnames2[i123].equals(righCol)){
									  id2=i123;
								  }
							  }
							  int sum=0;
							  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][id1])+Integer.parseInt(arraytotal[i][id2]);//convert string to int
							  } 
							  if (sum!=0){
						    	  ret12.add(new Datum.Int(sum));
						    	  cal++;
						      }

						  }
						  else if (q2s.contains("*")){
							  int id1=0;
							  int id2=0;
							  int a111=parString.indexOf("*");
							  String leftCol=parString.substring(a111-2,a111-1);
							  String righCol=parString.substring(a111+2,a111+3);
							  
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(leftCol)){
									  id1=i123;
								  }
								  if (colnames2[i123].equals(righCol)){
									  id2=i123;
								  }
							  }
							  int sum=0;
							  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][id1])*Integer.parseInt(arraytotal[i][id2]);//convert string to int
							  } 
							  if (sum!=0){
						    	  ret12.add(new Datum.Int(sum));
						    	  cal++;
						      }
						  }
						  else {
						  String colName=q2s.substring(a1+2, a1+3);
						 
						  if (table.contains(in*10+1))// from the file
						  {
						  i1=table.indexOf(colName);
						  i2=table.indexOf(in*10+1);
						  
						  Schema.TableFromFile table_R=tables.get(table.get(i2+1));
						  String pathadd=table_R.getFile().toString();
						  Readtable readr= new Readtable();
					      arraytotal= readr.readfile(pathadd);
						  }
						  else // not from the file, but from the results of its child node
						  {
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  //System.out.println((String [])COLNAMES.get(i6));
							 String [] colnames3=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames3.length;i123++){
								  if (colnames3[i123].equals(colName)){
									  index1=i123;
								  }
							  }
							  
						  }
						  int sum=0;
					      if (i1==i2+2){
					    	  for( i = 0; i < arraytotal.length; i++){
					    		  sum=sum+Integer.parseInt(arraytotal[i][0]);//convert string to int
					    	  }
					      }
					      else if (i1==i2+3)
					      {
					    	  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][1]);//convert string to int
							  }  	  
					      }
					      else if (index1!=-100){
					    	  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][index1]);//convert string to int
							  }  
					      }
						
							//Schema.Var v1=new Schema.Var ("R",colName);
							 
							// System.out.println(table_R.lookup(v1));
						  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
					      if (sum!=0){
					    	  ret12.add(new Datum.Int(sum));
					    	  cal++;
					      }
						  }
						  //ret.add(new Datum[] {new Datum.Int(sum)});
						  //return ret;
					  }
					  if (q2s.contains("AVG"))
					  {
						  int a1= q2s.indexOf("G(");
						  int b1= 0;
						  for (int i41=a1+1;i41<q2s.length();i41++){
							  if (q2s.substring(i41,i41+1).equals(")")){
								  b1=i41;
								  break;
							  }
						  }
						  i1=0;
						  i2=0;
						  index1=-100;
						  String parString=q2s.substring(a1+1,b1);
						  if (parString.contains("+")){
							  int id1=0;
							  int id2=0;
							  int a111=parString.indexOf("+");
							  String leftCol=parString.substring(a111-2,a111-1);
							  String righCol=parString.substring(a111+2,a111+3);
							  
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(leftCol)){
									  id1=i123;
								  }
								  if (colnames2[i123].equals(righCol)){
									  id2=i123;
								  }
							  }
							  int sum=0;
							  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][id1])+Integer.parseInt(arraytotal[i][id2]);//convert string to int
							  } 
							  float average=0;
						     	 float count=arraytotal.length;
						     	 float sum2=sum;
						     	average=sum2/count;
							     //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
						     	if (sum!=0){
							    	  ret12.add(new Datum.Flt(average));
							    	  cal++;
							      }

						  }
						  else if (q2s.contains("*")){
							  
						  }
						  else {
						  //String arraytotal[][]=new String [0][0];
						  //String [] colnames2=new String [0];
						  String colName=q2s.substring(a1+2, a1+3);
						  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
						  if (table.contains(in*10+1))// from the file
						  {
						  i1=table.indexOf(colName);
						  i2=table.indexOf(in*10+1);
						  
						  Schema.TableFromFile table_R=tables.get(table.get(i2+1));
						  String pathadd=table_R.getFile().toString();
						  Readtable readr= new Readtable();
					      arraytotal= readr.readfile(pathadd);
						  }
						  else // not from the file, but from the results of its child node
						  {
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(colName)){
									  index1=i123;
								  }
							  }
							  
						  }
						  int sum=0;
					      if (i1==i2+2){
					    	  for( i = 0; i < arraytotal.length; i++){
					    		  sum=sum+Integer.parseInt(arraytotal[i][0]);//convert string to int
					    	  }
					      }
					      else if (i1==i2+3)
					      {
					    	  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][1]);//convert string to int
							  }  	  
					      }
					      else if (index1!=-100){
					    	  for(  i = 0; i < arraytotal.length; i++){
							      sum=sum+Integer.parseInt(arraytotal[i][index1]);//convert string to int
							  }  
					      }
					      float average=0;
					     	 float count=arraytotal.length;
					     	 float sum2=sum;
					     	average=sum2/count;
						     //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
					     	if (sum!=0){
						    	  ret12.add(new Datum.Flt(average));
						    	  cal++;
						      }
						  }
							 //ret.add(new Datum[] {new Datum.Flt(average)});
							 //return ret;
						  }
					  if (q2s.contains("MIN"))
					  {
						  int a1= q2s.indexOf("N");
						  int b1= q2s.indexOf(")");
						  i1=0;
						  i2=0;
						  index1=-100;
						  //Starraytotal[][]=new String [0][0];
						  //String [] colnames2=new String [0];
						  String colName=q2s.substring(a1+2, a1+3);
						  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
						  if (table.contains(in*10+1))// from the file
						  {
						  i1=table.indexOf(colName);
						  i2=table.indexOf(in*10+1);
						  
						  Schema.TableFromFile table_R=tables.get(table.get(i2+1));
						  String pathadd=table_R.getFile().toString();
						  Readtable readr= new Readtable();
					      arraytotal= readr.readfile(pathadd);
						  }
						  else // not from the file, but from the results of its child node
						  {
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(colName)){
									  index1=i123;
								  }
							  }
							  
						  }
						  int min=1000000;
					      if (i1==i2+2){
					    	  for( i = 0; i < arraytotal.length; i++){
					    		  if (Integer.parseInt(arraytotal[i][0])<min){
					    			  min=Integer.parseInt(arraytotal[i][0]);
					    		  }
					    				  ;//convert string to int
					    	  }
					      }
					      else if (i1==i2+3)
					      {
					    	  for(  i = 0; i < arraytotal.length; i++){
					    		  if (Integer.parseInt(arraytotal[i][1])<min){
					    			  min=Integer.parseInt(arraytotal[i][1]);
					    		  }//convert string to int
							  }  	  
					      }
					      
						  //   ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
					      if (min!=1000000){
					    	  ret12.add(new Datum.Int(min));
					    	  cal++;
					      }
							 //ret.add(new Datum[] {new Datum.Int(min)});
							 //return ret;
						  }
					  if (q2s.contains("MAX"))
					  {
						  int a1= q2s.indexOf("X");
						  int b1= q2s.indexOf(")");
						  i1=0;
						  i2=0;
						  index1=-100;
						  //String arraytotal[][]=new String [0][0];
						  //String [] colnames2=new String [0];
						  String colName=q2s.substring(a1+2, a1+3);
						 // ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
						  if (table.contains(in*10+1))// from the file
						  {
						  i1=table.indexOf(colName);
						  i2=table.indexOf(in*10+1);
						  
						  Schema.TableFromFile table_R=tables.get(table.get(i2+1));
						  String pathadd=table_R.getFile().toString();
						  Readtable readr= new Readtable();
					      arraytotal= readr.readfile(pathadd);
						  }
						  else // not from the file, but from the results of its child node
						  {
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							  colnames2=(String [])COLNAMES.get(i6);
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(colName)){
									  index1=i123;
								  }
							  }
							  
						  }
						  int max=-1000000;
					      if (i1==i2+2){
					    	  for( i = 0; i < arraytotal.length; i++){
					    		  if (Integer.parseInt(arraytotal[i][0])>max){
					    			  max=Integer.parseInt(arraytotal[i][0]);
					    		  }
					    				  ;//convert string to int
					    	  }
					      }
					      else if (i1==i2+3)
					      {
					    	  for(  i = 0; i < arraytotal.length; i++){
					    		  if (Integer.parseInt(arraytotal[i][1])>max){
					    			  max=Integer.parseInt(arraytotal[i][1]);
					    		  }//convert string to int
							  }  	  
					      }
					      
						 //    ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
					      if (max!=-1000000){
					    	  ret12.add(new Datum.Int(max));
					    	  cal++;
					      }
							 //ret.add(new Datum[] {new Datum.Int(max)});
							 //return ret;
						  }
					  if (q2s.contains("COUNT"))
					  {
						  int a1= q2s.indexOf("T");
						  int b1= q2s.indexOf(")");
						  
						  String colName=q2s.substring(a1+2, a1+3);
						  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
						  if (table.contains(in*10+1))// from the file
						  {
						  i1=table.indexOf(colName);
						  i2=table.indexOf(in*10+1);
						  
						  Schema.TableFromFile table_R=tables.get(table.get(i2+1));
						  String pathadd=table_R.getFile().toString();
						  Readtable readr= new Readtable();
					      arraytotal= readr.readfile(pathadd);
						  }
						  else // not from the file, but from the results of its child node
						  {
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6);
							 // colnames2=(String [])COLNAMES.get(i6);
							  //for (int i123=0;i123<colnames2.length;i123++){
							//	  if (colnames2[i123].equals(colName)){
							//		  index1=i123;
							//	  }
							//  }
							 
						  }
						  int count=0;
						  count=arraytotal.length;
						  
						  if (count!=0){
					    	  ret12.add(new Datum.Int(count));
					    	  cal++;
					      }
						  //ret.add(new Datum[] {new Datum.Int(count)});
						   
						  }
					  Datum [] ret13=new Datum [cal];// now the datum [] lenth is the number of calculations
					  for (int i13=0;i13<cal;i13++){
						  ret13[i13]=ret12.get(i13);
					  }
					  ret.add(ret13);
					  return ret;
					  //break;
				  case PROJECT:
					  
					  String q3s=q1.detailString();
					  if (q3s.contains(":") && !q3s.contains("EXPR") && !q3s.contains("bob") && !q3s.contains("joe")){
						  q3s=q3s.trim();
						  ArrayList nPro=new ArrayList ();// the names after the :
						  for (int iPro=0;iPro<q3s.length();iPro++){
							  if (q3s.substring(iPro,iPro+1).equals(":")){
								  nPro.add(q3s.substring(iPro+2,iPro+3));
							  }
						  }
						  
						  int i3=indexpl.indexOf(in*10+1);
						  if (indi[i3]==0)
						  {//no data from child node
							  String [][] a1=new String [1][nPro.size()];
							  for (int iPro=0;iPro<nPro.size();iPro++){	  
								  a1[0][iPro]=nPro.get(iPro).toString();
							  }
							  int i34=indexpl.indexOf(in);
							  indi[i34]=1;
							  data.set(i34, a1); 
						  }
						  else if (table.contains(in*10+1))// from the file
						  {
							  int iPro1=table.indexOf(in*10+1);
							  
							  Schema.TableFromFile table_R=tables.get(table.get(iPro1+1));
							  String pathadd=table_R.getFile().toString();
							  Readtable readr= new Readtable();
						      arraytotal= readr.readfile(pathadd);	// read the file
						      
							  int [] orderCol=new int [nPro.size()];
							  for (int iPro2=0;iPro2<2;iPro2++){
							  for (int iPro=0;iPro<nPro.size();iPro++){
								  if (table.get(iPro1+2+iPro2).equals(nPro.get(iPro))){
									  orderCol[iPro]=iPro2;
								  }	  
							  }							 
							  }
							  String [][] a1=new String [arraytotal.length][orderCol.length];
							  for (int iPro=0;iPro<arraytotal.length;iPro++){	  
								  for (int iProo=0;iProo<orderCol.length;iProo++){
								  a1[iPro][iProo]=arraytotal[iPro][orderCol[iProo]];}
							  }
							  int i34=indexpl.indexOf(in);
							  indi[i34]=1;
							  data.set(i34, a1);  
							  if (in==1){
							    	ArrayList<Datum[]> ret3 = new ArrayList<Datum[]>();
							    	for (int i7=0;i7<a1.length;i7++){
							    		Datum [] ret113=new Datum [a1[0].length];// now the datum [] lenth is the number of calculations
										  for (int i13=0;i13<a1[0].length;i13++){
											  ret113[i13]=new Datum.Int(Integer.parseInt(a1[i7][i13]));
										  }
										  ret3.add(ret113);//each row is a datum [] type
							    		//ret3.add(new Datum[] {new Datum.Int(Integer.parseInt(arrayunion[i7][0]))});
									  }
									  return ret3;}
						  }
						  else { // from the childnode
							  char [] c33=q3s.toCharArray();
							  //ArrayList  a1=new ArrayList () ;
							  ArrayList colNames123=new ArrayList ();
							  ArrayList ragNames123=new ArrayList ();
							  for (int i33=0;i33<c33.length;i33++){
								  if (c33[i33]=='.'){
									  colNames123.add(String.valueOf(c33[i33+1]));
									  ragNames123.add(String.valueOf(c33[i33-1]));
								  }
							  }
							  
							  int i6=indexpl.indexOf(in*10+1);
							  arraytotal=(String [][])data.get(i6); // get the data and colname from the childnode
							  colnames2=(String [])COLNAMES.get(i6);
							  String [] ragNames321=(String [])RANGENAMES.get(i6);
							  //if (ragNames123.size()<colnames2.length) //duplicate
							  //{
								//  for (int i00=0; i00<ragNames123.size();i00++){
								//	  ragNames321.add(ragNames123.get(i00));
								//	  ragNames321.add(ragNames123.get(i00));
								//  }
							  //}
							  //else if (ragNames123.size()==colnames2.length){
								 // ragNames321=ragNames123;
							  //}
							  
							  int [] orderCol=new int [colNames123.size()];
							  for (int ior=0;ior<orderCol.length;ior++){
							  for (int i123=0;i123<colnames2.length;i123++){
								  if (colnames2[i123].equals(colNames123.get(ior)) && ragNames321[i123].equals(ragNames123.get(ior))){
									  orderCol[ior]=i123;
									  
								  }
							  }
							  }
							 
							  String [][] a1=new String [arraytotal.length][orderCol.length];
							  for (int iPro=0;iPro<arraytotal.length;iPro++){	  
								  for (int iProo=0;iProo<orderCol.length;iProo++){
								  a1[iPro][iProo]=arraytotal[iPro][orderCol[iProo]];}
							  }
							  int i34=indexpl.indexOf(in);
							  indi[i34]=1;
							  data.set(i34, a1);  
							  if (in==1){
							    	ArrayList<Datum[]> ret3 = new ArrayList<Datum[]>();
							    	for (int i7=0;i7<a1.length;i7++){
							    		Datum [] ret113=new Datum [a1[0].length];// now the datum [] lenth is the number of calculations
										  for (int i13=0;i13<a1[0].length;i13++){
											  ret113[i13]=new Datum.Int(Integer.parseInt(a1[i7][i13]));
										  }
										  ret3.add(ret113);//each row is a datum [] type
							    		//ret3.add(new Datum[] {new Datum.Int(Integer.parseInt(arrayunion[i7][0]))});
									  }
									  return ret3;} 
						  }
						  
					  }
					  else {
					  ArrayList<Datum[]> ret1 = new ArrayList<Datum[]>();
					  int i3=indexpl.indexOf(in*10+1);
					  if (indi[i3]==0)
					  {
						  if ((q3s.contains("+")||q3s.contains("-")||q3s.contains("*")||q3s.contains("/"))&&q3s.contains("(")&&q3s.contains(")"))
						  {
							  float result=0;
							
								  if (q3s.contains("+")||q3s.contains("-"))
								  {
									  if (q3s.contains("+"))
									  {
										  if (q3s.contains("*"))
										  {
											  int a11= q3s.indexOf("((");
											  int a22= q3s.indexOf("+");
											  int a33= q3s.indexOf(")");///why )* is wrong
											  int a44= q3s.indexOf(")]");
											  String colName1=q3s.substring(a11+2, a22);
											  String colName2=q3s.substring(a22+1, a33);
											  String colName3=q3s.substring(a33+3, a44);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  float f3=Float.parseFloat(colName3);
											  result=(f1+f2)*f3;
										  }
										  else if (q3s.contains("/"))
										  {
											  int a11= q3s.indexOf("((");
											  int a22= q3s.indexOf("+");
											  int a33= q3s.indexOf("/");///why )* is wrong
											  int a44= q3s.indexOf(")]");
											  String colName1=q3s.substring(a11+2, a22);
											  String colName2=q3s.substring(a22+1, a33);
											  String colName3=q3s.substring(a33+2, a44);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  float f3=Float.parseFloat(colName3);
											  result=(f1+f2)/f3;
											  
										  }
										  else///only have +
										  {
											  int aa= q3s.indexOf("(");
											  int bb= q3s.indexOf("+");
											  int cc= q3s.indexOf(")");
											  if (bb>aa&&bb<cc)//+ is between ( and )
											  {
												  String colName1=q3s.substring(aa+1, bb);
												  String colName2=q3s.substring(bb+1, cc);
												  float f1=Float.parseFloat(colName1);
												  float f2=Float.parseFloat(colName2);
												  result=f1+f2;
											  }
											  
										  }
										 
									  }
									  else if (q3s.contains("-"))
									  {
										  if (q3s.contains("*"))
										  {
											  int a11= q3s.indexOf("((");
											  int a22= q3s.indexOf("-");
											  int a33= q3s.indexOf("*");///why )* is wrong
											  int a44= q3s.indexOf(")]");
											  String colName1=q3s.substring(a11+2, a22);
											  String colName2=q3s.substring(a22+1, a33);
											  String colName3=q3s.substring(a33+2, a44);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  float f3=Float.parseFloat(colName3);
											  result=(f1-f2)*f3;
										  }
										  else if (q3s.contains("/"))
										  {
											  int a11= q3s.indexOf("((");
											  int a22= q3s.indexOf("-");
											  int a33= q3s.indexOf("/");///why )* is wrong
											  int a44= q3s.indexOf(")]");
											  String colName1=q3s.substring(a11+2, a22);
											  String colName2=q3s.substring(a22+1, a33);
											  String colName3=q3s.substring(a33+2, a44);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  float f3=Float.parseFloat(colName3);
											  result=(f1-f2)/f3;
											  
										  }
										  else///only have -
										  {
											  int aa= q3s.indexOf("(");
											  int bb= q3s.indexOf("-");
											  int cc= q3s.indexOf(")");
											  if (bb>aa&&bb<cc)//+ is between ( and )
											  {
												  String colName1=q3s.substring(aa+1, bb);
												  String colName2=q3s.substring(bb+1, cc);
												  float f1=Float.parseFloat(colName1);
												  float f2=Float.parseFloat(colName2);
												  result=f1-f2;
											  }
											  
										  }
										 
									  }
									 
								  }
								  else
								  {
									  if (q3s.contains("*"))//do not consider additional + or -
										 {
											 int a11= q3s.indexOf("(");
											  int a22= q3s.indexOf("*");
											  String colName1=q3s.substring(a11+1, a22);
											  int a33=q3s.indexOf(")");
											  String colName2=q3s.substring(a22+1, a33);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  result=f1*f2;
											  
											 
										 }
										 else if (q3s.contains("/"))//do not consider additional + or -
										 {
											 int a11= q3s.indexOf("(");
											  int a22= q3s.indexOf("/");
											  String colName1=q3s.substring(a11+1, a22);
											  int a33=q3s.indexOf(")");
											  String colName2=q3s.substring(a22+1, a33);
											  float f1=Float.parseFloat(colName1);
											  float f2=Float.parseFloat(colName2);
											  result=f1*f2;
											 
										 }
								  }
								  
							  /////the return value type
								  if(q3s.contains("."))//float
								  {
									  float resultflt;
									  resultflt=result;
									  
									  ret1.add(new Datum[] {new Datum.Flt(resultflt)});
									  return ret1;
								  }
								  else///integer 
								  {
									  int resultint;
									  resultint=(int)result;
									  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
									  ret1.add(new Datum[] {new Datum.Int(resultint)});
									  return ret1;
							      }
							  
						  }
						  if (q3s.contains("true")|| q3s.contains("false") )/////AND, OR
						  {
							  if (q3s.contains("true"))
								  {
								  if (q3s.contains("false"))
									  {
									  if( q3s.contains("AND"))
										  {
										  boolean result= false;
										  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
										  ret1.add(new Datum[] {new Datum.Bool(result)});
										  return ret1;
										  }
									  else if (q3s.contains("OR"))
									  {
										  boolean result= true;
										  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
										  ret1.add(new Datum[] {new Datum.Bool(result)});
										  return ret1;
									  }
										  
									  }
								  else if(q3s.contains("NOT"))
									  {
									  boolean result= false;
									  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
									  ret1.add(new Datum[] {new Datum.Bool(result)});
									  return ret1;
									  }
								  else
								      {
									  boolean result= true;
									  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
									  ret1.add(new Datum[] {new Datum.Bool(result)});
									  return ret1;
								      }
							  
								  }
							  else//false
							  {
								  if(q3s.contains("NOT"))
								  {
									  boolean result= true;
									  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
									  ret1.add(new Datum[] {new Datum.Bool(result)});
									  return ret1;
								  }
								  else
								  {
									  boolean result= false;
									  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
									  ret1.add(new Datum[] {new Datum.Bool(result)});
									  return ret1;
									  
								  }
							  }
						  }
						  if (q3s.contains("'"))
						  {
							  int a11= q3s.indexOf("'");
							  int b11= q3s.indexOf("']");
							  String colName1=q3s.substring(a11+1, b11); 
							
							  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
							  ret1.add(new Datum[] {new Datum.Str(colName1)});
							  return ret1;
							  
						  }
	
						  else if (q3s.contains("."))///float number
						  {
							  int a11= q3s.indexOf(":");
							  int b11= q3s.indexOf("]");
							  String colName1=q3s.substring(a11+1, b11); 
							  colName1=colName1.trim();
							  float f1=Float.parseFloat(colName1);
							  
							  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
							  ret1.add(new Datum[] {new Datum.Flt(f1)});
							  return ret1;
						  }
						  else ///integer number
						  {
							  int a11= q3s.indexOf(":");
							  int b11= q3s.indexOf("]");
							  String colName1=q3s.substring(a11+1, b11); 
							  colName1=colName1.trim();
							  int i4=Integer.parseInt(colName1);
							  //ArrayList<Datum[]> ret = new ArrayList<Datum[]>();
							  ret1.add(new Datum[] {new Datum.Int(i4)});
							  return ret1;
						  }
						  
					  }
					  }
					  break;
				  case SELECT:
					  
					  int [] colIndex=new int [table.size()];
					  String q4s=q1.detailString();
					  //System.out.println(q4s);
					  q4s=q4s.trim();
					  char [] c=q4s.toCharArray();
					  if (q4s.contains("AND") && q4s.contains("OR")){
						 int iAnd=q4s.indexOf("AND");
						 int iOR=q4s.indexOf("OR");
						 if (iAnd <iOR){                                                 //regular expression
							 Pattern p=Pattern.compile(".+(.+)AND((.+)OR(.+)).+");
							 Matcher m=p.matcher(q4s);
							 boolean bol=m.matches();
							 //System.out.println(bol);// this tells us the relations is and ( or )
							 ArrayList names0=new ArrayList();
							 ArrayList rela=new ArrayList();
							 
							 for (int i11=0; i11<c.length;i11++){
								 if (c[i11]=='=' || c[i11]=='>' ||c[i11]=='<'){
									 rela.add(c[i11]);
								 }
								 if (c[i11]=='.'){
									 names0.add(String.valueOf(c[i11-1]));
									 names0.add(String.valueOf(c[i11+1]));
								 }
							 }
							 int icolnames=indexpl.indexOf(10*in+1);
							 String [] orderRange=(String [])RANGENAMES.get(icolnames);//need the range names to decide the order of < or >
							 String [] colnames=(String [])COLNAMES.get(icolnames); // need the columnames
							 String [][] arraytotal1=(String [][])data.get(icolnames);//need the data
							 
							 ArrayList <String []> arraySelect=new ArrayList <String []> ();                                                      /////////revise the next part according to this one
							 ArrayList location=new ArrayList ();
							 for (int i123=0;i123<names0.size();i123=i123+2){
								 for (int i1234=0;i1234<colnames.length;i1234++){// find the locations of the relationships
									 if (names0.get(i123).equals(orderRange[i1234]) && names0.get(i123+1).equals(colnames[i1234])){
										 location.add(i1234);
									 }
								 }
							 }
							 if (bol && rela.get(0).equals('=') && rela.get(1).equals('>')&& rela.get(2).equals('<')){
								 for (int i11=0;i11<arraytotal1.length;i11++){
									  if (arraytotal1[i11][Integer.parseInt(location.get(0).toString())].equals(arraytotal1[i11][Integer.parseInt(location.get(1).toString())]) && ((Integer.parseInt(arraytotal1[i11][Integer.parseInt(location.get(2).toString())])>Integer.parseInt((arraytotal1[i11][Integer.parseInt(location.get(3).toString())]))) || (Integer.parseInt(arraytotal1[i11][Integer.parseInt(location.get(4).toString())])<Integer.parseInt((arraytotal1[i11][Integer.parseInt(location.get(5).toString())])))))
											  { /////////*******************2 is the defaulted value, need change later
										  arraySelect.add(arraytotal1[i11]);

									  }
							  }
							 }
							 String arrayjoin1[][]=new String [arraySelect.size()][arraySelect.get(0).length];// convert the arraylist format into the strring [][] format
							  for (int i11=0;i11<arraySelect.size();i11++)
							  {
								  arrayjoin1[i11]=arraySelect.get(i11);
							  }
							  
							  int i51=indexpl.indexOf(in);
							  indi[i51]=1;
							  
							 
					    	 // System.out.println("1");
							  COLNAMES.set(i51, colnames);
							  RANGENAMES.set(i51, orderRange);
							  data.set(i51, arrayjoin1); 
							 
						 }
						 else if (iAnd>iOR){
							 
						 }
					  }
					  else if (q4s.contains("AND") && !q4s.contains("OR")){
						  String [] l1=q4s.split("AND");
						  //System.out.println(l1);
						  ArrayList <String> colnames3=new ArrayList ();
						  ArrayList <String> rannames3=new ArrayList ();
						  int icol12=0;
						  ArrayList names0=new ArrayList();
						  String rela0=new String ();
						  char [] c2=l1[0].toCharArray();		  
						  for (int i11=0;i11<c2.length;i11++){ //got the index of '.'
							  if (c2[i11]=='.')
							  {
								  names0.add(String.valueOf(c2[i11-1]));
								  names0.add(String.valueOf(c2[i11+1]));
							  }
						  }
						  if (l1[0].contains("="))
						  {
							  rela0="=";
						  }
						  
						  
						  ArrayList names1=new ArrayList();
						  String rela1=new String ();
						  
						  int icolnames=indexpl.indexOf(10*in+1);
						  String [] orderRange=(String [])RANGENAMES.get(icolnames);//need the range names to decide the order of < or >
						  int leftR=0;
						  int rigR=0;
						  char [] c3=l1[1].toCharArray();		  
						  for (int i11=0;i11<c3.length;i11++){ //got the index of '.'
							  if (c3[i11]=='.')
							  {
								  names1.add(String.valueOf(c3[i11-1]));
								  names1.add(String.valueOf(c3[i11+1]));
								  
							  }
						  }
						  
						  for (int iorder=0;iorder<orderRange.length;iorder++){
							  if (orderRange[iorder].equals((String)names1.get(0))){
								  leftR=iorder;
								  break;
							  }
						  }
						  for (int iorder=0;iorder<orderRange.length;iorder++){
							  if (orderRange[iorder].equals((String)names1.get(2))){
								  rigR=iorder;
								  break;
							  }
						  }
						  //leftR=orderRange.toString().indexOf((String)names1.get(0));
						  //rigR=orderRange.toString().indexOf((String)names1.get(1));
						  
						  
						  
						  if (l1[1].contains("="))
						  {
							  rela1="=";
						  }
						  else if (leftR<rigR && l1[1].contains("<")){
							  rela1="<";
						  }
						  else if (leftR>rigR && l1[1].contains("<")){
							  rela1=">";
						  }
						  else if (leftR<rigR && l1[1].contains(">")){
							  rela1=">";
						  }
						  else if (leftR>rigR && l1[1].contains(">")){
							  rela1="<";
						  }
						  
						  ArrayList location0=new ArrayList ();
						  ArrayList location1=new ArrayList ();
						  for (int i4=0;i4<names0.size();i4=i4+2){
							  if (table.contains(names0.get(i4))){//range name
								  
								  i2=table.indexOf(names0.get(i4));
								  String str=(String)table.get(i2+1);
								  String str1=(String)table.get(i2+2);
								  if (colIndex[i2]==0){
								  colnames3.add(str);
								  rannames3.add((String)names0.get(i4));
								  icol12++;
								  colnames3.add(str1);
								  rannames3.add((String)names0.get(i4));
								  icol12++;
								  colIndex[i2]=1;}
								  if (names0.get(i4+1).equals(str)){
									  location0.add(1);
								  }
								  
								  else if (names0.get(i4+1).equals(str1)){
									  location0.add(2);
								  }
							  }
						  }
						  if (leftR<rigR){
						  for (int i5=0;i5<names1.size();i5=i5+2){
							  if (table.contains(names1.get(i5))){//range name
								  
								  i2=table.indexOf(names1.get(i5));
								  String str=(String)table.get(i2+1);
								  String str1=(String)table.get(i2+2);
								  if (colIndex[i2]==0){
									  colnames3.add(str);
									  rannames3.add((String)names1.get(i5));
									  icol12++;
									  colnames3.add(str1);
									  rannames3.add((String)names1.get(i5));
									  icol12++;
									  colIndex[i2]=1;}
								  if (names1.get(i5+1).equals(str)){
									  location1.add(1);
								  }
								  
								  else if (names1.get(i5+1).equals(str1)){
									  location1.add(2);
								  }
							  }
						  }
						  }
						  else {
							  for (int i5=names1.size()-2;i5>=0;i5=i5-2){
								  if (table.contains(names1.get(i5))){//range name
									  
									  i2=table.indexOf(names1.get(i5));
									  String str=(String)table.get(i2+1);
									  String str1=(String)table.get(i2+2);
									  if (colIndex[i2]==0){
										  colnames3.add(str);
										  rannames3.add((String)names1.get(i5));
										  icol12++;
										  colnames3.add(str1);
										  rannames3.add((String)names1.get(i5));
										  icol12++;
										  colIndex[i2]=1;}
									  if (names1.get(i5+1).equals(str)){
										  location1.add(1);
									  }
									  
									  else if (names1.get(i5+1).equals(str1)){
										  location1.add(2);
									  }
								  }
							  }
						  }
						  int i6=indexpl.indexOf(in*10+1);
						  arraytotal=(String [][])data.get(i6);
						  ArrayList <String []> arraySelect=new ArrayList <String []> ();
						  int i12=0;
						  if (rela0=="=" && rela1=="="){
							  for (int i11=0;i11<arraytotal.length;i11++){
								  if (arraytotal[i11][Integer.parseInt(location0.get(0).toString())-1].equals(arraytotal[i11][1+Integer.parseInt(location0.get(1).toString())]) && arraytotal[i11][Integer.parseInt(location1.get(0).toString())+1].equals(arraytotal[i11][3+Integer.parseInt(location1.get(1).toString())])){ /////////*******************2 is the defaulted value, need change later
									  arraySelect.add(arraytotal[i11]);
									  i12++;
								  }
						  }
						  }
						  if (rela0=="=" && rela1=="<"){
							  for (int i11=0;i11<arraytotal.length;i11++){
								  if (arraytotal[i11][Integer.parseInt(location0.get(0).toString())-1].equals(arraytotal[i11][1+Integer.parseInt(location0.get(1).toString())]) && Integer.parseInt(arraytotal[i11][Integer.parseInt(location1.get(0).toString())+1])<Integer.parseInt((arraytotal[i11][3+Integer.parseInt(location1.get(1).toString())]))){ /////////*******************2 is the defaulted value, need change later
									  arraySelect.add(arraytotal[i11]);
									  i12++;
								  }
						  }
						  }
						  if (rela0=="=" && rela1==">"){
							  for (int i11=0;i11<arraytotal.length;i11++){
								  if (arraytotal[i11][Integer.parseInt(location0.get(0).toString())-1].equals(arraytotal[i11][1+Integer.parseInt(location0.get(1).toString())]) && Integer.parseInt(arraytotal[i11][Integer.parseInt(location1.get(0).toString())+1])>Integer.parseInt((arraytotal[i11][3+Integer.parseInt(location1.get(1).toString())]))){ /////////*******************2 is the defaulted value, need change later
									  arraySelect.add(arraytotal[i11]);
									  i12++;
								  }
						  }
						  }
						  String arrayjoin1[][]=new String [i12][arraySelect.get(0).length];// convert the arraylist format into the strring [][] format
						  for (int i11=0;i11<i12;i11++)
						  {
							  arrayjoin1[i11]=arraySelect.get(i11);
						  }
						  
						  int i51=indexpl.indexOf(in);
						  indi[i51]=1;
						  
						  String [] colnames231=new String [icol12];
				    	  for (int ij=0;ij<icol12;ij++){
				    		  colnames231[ij]=colnames3.get(ij);
				    	  }
				    	  
				    	  String [] ragnames231=new String [icol12];
				    	  for (int ij=0;ij<icol12;ij++){
				    		  ragnames231[ij]=rannames3.get(ij);
				    	  }
				    	 
				    	 // System.out.println("1");
						  COLNAMES.set(i51, colnames231);
						  RANGENAMES.set(i51, ragnames231);
						  data.set(i51, arrayjoin1); 
						  
					  }
					  else {
					  ArrayList <String> colnames1=new ArrayList ();
					  ArrayList <String> ragnames1=new ArrayList ();
					  int icol1=0;
					  //System.out.println(sp[0]);
					  //ArrayList dot=new ArrayList ();
					  int leftdot=0;
					  int rightdot=0;
					  for (int i11=0;i11<c.length;i11++){ //got the index of '.'
						  if (c[i11]=='.')
						  {
							  if (leftdot==0){
								  leftdot=i11;
							  }
							  else if (rightdot==0){
								  rightdot=i11;
							  }
						  }
					  }
					  
					  String leftRgename=String.valueOf(c[leftdot-1]);
					  String leftColname=String.valueOf(c[leftdot+1]);
					  
					  String rigRgename=String.valueOf(c[rightdot-1]);
					  String rigColname=String.valueOf(c[rightdot+1]);
					  

					  int l=0;
					  int r=0;
					  
					  if (table.contains(leftRgename)){
						  
						  i2=table.indexOf(leftRgename);
						  String str=(String)table.get(i2+1);
						  String str1=(String)table.get(i2+2);
						  colnames1.add(str);
						  ragnames1.add(leftRgename);
						  icol1++;
						  colnames1.add(str1);
						  ragnames1.add(leftRgename);
						  icol1++;
						  if (leftColname.equals(str)){
							  l=1;
						  }
						  
						  else if (leftColname.equals(str1)){
							  l=2;
						  }
					  }
					  if (table.contains(rigRgename)){
						  
						  i2=table.indexOf(rigRgename);
						  String str=(String)table.get(i2+1);
						  String str1=(String)table.get(i2+2);
						  colnames1.add(str);
						  ragnames1.add(rigRgename);
						  icol1++;
						  colnames1.add(str1);
						  ragnames1.add(rigRgename);
						  icol1++;
						  if (rigColname.equals(str)){
							  r=1;
						  }
						  else if (rigColname.equals(str1)){
							  r=2;
						  }
					  }
					  
					  int i6=indexpl.indexOf(in*10+1);
					  arraytotal=(String [][])data.get(i6);
					  ArrayList <String []> arraySelect=new ArrayList <String []> ();
					  int i12=0;
					  if (q4s.contains(">"))
					  {
						  
					  }
					  else if (q4s.contains("="))
					  {
						  for (int i11=0;i11<arraytotal.length;i11++){
								  if (arraytotal[i11][l-1].equals(arraytotal[i11][1+r])){ /////////*******************2 is the defaulted value, need change later
									  arraySelect.add(arraytotal[i11]);
									  i12++;
								  }
						  }
					  }
					  else if (q4s.contains("<"))
					  {
						  
					  }
					  else if (q4s.contains(">="))
					  {
						  
					  }
					  else if (q4s.contains("<="))
					  {
						  
					  }
					  String arrayjoin1[][]=new String [i12][arraySelect.get(0).length];// convert the arraylist format into the strring [][] format
					  for (int i11=0;i11<i12;i11++)
					  {
						  arrayjoin1[i11]=arraySelect.get(i11);
					  }
					  
					  int i51=indexpl.indexOf(in);
					  indi[i51]=1;
					  
					  String [] colnames231=new String [icol1];
			    	  for (int ij=0;ij<icol1;ij++){
			    		  colnames231[ij]=colnames1.get(ij);
			    	  }
			    	  
			    	  String [] ragnames231=new String [icol1];
			    	  for (int ij=0;ij<icol1;ij++){
			    		  ragnames231[ij]=ragnames1.get(ij);
			    	  }
			    	 
			    	 // System.out.println("1");
					  COLNAMES.set(i51, colnames231);
					  RANGENAMES.set(i51, ragnames231);
					  data.set(i51, arrayjoin1);
					  }//replace the original information in the data associated with node
					  break;
					  
				  case JOIN:
					  String arrayleft[][]= new String [0][0];
					  String arrayright[][]=new String [0][0];
					  ArrayList <String> colnames=new ArrayList ();
					  ArrayList <String> ragnames=new ArrayList ();
					  int icol=0;
					  if (table.contains(in*10+1))
					  {
						  i2=table.indexOf(in*10+1);
						  colnames.add((String)table.get(i2+2));
						  ragnames.add((String)table.get(i2+1));
						  icol++;
						  colnames.add((String)table.get(i2+3));
						  ragnames.add((String)table.get(i2+1));
						  icol++;
						  Schema.TableFromFile table_R1=tables.get(table.get(i2+1));
						  String pathadd1=table_R1.getFile().toString();
						  Readtable readr1= new Readtable();
					      arrayleft= readr1.readfile(pathadd1);
					  }
					  else {
						  
						  i2=indexpl.indexOf(in*10+1);
						  String [][] preArray=(String [][])data.get(i2);
						  String [] preColname=(String [])COLNAMES.get(i2);
						  String [] preRagname=(String [])RANGENAMES.get(i2);
						  for (int i143=0;i143<preColname.length;i143++){
							  colnames.add(preColname[i143]);
							  ragnames.add(preRagname[i143]);
							  icol++;
						  }
						  arrayleft=preArray;
					  }
						  
					  if (table.contains(in*10+2))
					  {
						  i2=table.indexOf(in*10+2);
						  colnames.add((String)table.get(i2+2));
						  ragnames.add((String)table.get(i2+1));
						  icol++;
						  colnames.add((String)table.get(i2+3));
						  ragnames.add((String)table.get(i2+1));
						  icol++;
						  Schema.TableFromFile table_R2=tables.get(table.get(i2+1));
						  String pathadd2=table_R2.getFile().toString();
						  Readtable readr2= new Readtable();
					      arrayright= readr2.readfile(pathadd2);
					  }
					  else {
						  i2=indexpl.indexOf(in*10+1);
						  String [][] preArray=(String [][])data.get(i2);
						  String [] preColname=(String [])COLNAMES.get(i2);
						  String [] preRagname=(String [])RANGENAMES.get(i2);
						  for (int i143=0;i143<preColname.length;i143++){
							  colnames.add(preColname[i143]);
							  ragnames.add(preRagname[i143]);
							  icol++;
						  }
						  arrayright=preArray;
					  }
					  
					  int jleftnum=0;
				      int jrightnum=0;
				     
				      
			    	  jleftnum= arrayleft[0].length;
			    	  jrightnum=arrayright[0].length;
			    	  
			    	  String arrayjoin[][]=new String [arrayleft.length*arrayright.length][jleftnum+jrightnum];
			    	  
			    	 
			    	  
			    	  for ( i=0; i<arrayleft.length;i++) //join the two tables
			    	  {
			    		  
			    		  for (j=0; j<arrayright.length;j++)
			    		  {
			    			  for (int k=0; k<arrayleft[0].length;k++)
			    			  {arrayjoin[i*arrayright.length+j][k]=arrayleft[i][k];}
			    			  for (int k=0;k<arrayright[0].length;k++){
			    				 arrayjoin[i*arrayright.length+j][arrayleft[0].length+k]=arrayright[j][k]; 
			    			  }
			    		  }		    		  
			    	  }
			    	  
			    	  int i5=indexpl.indexOf(in);
			    	  indi[i5]=1;
			    	  String [] colnames23=new String [icol];
			    	  for (int ij=0;ij<icol;ij++){
			    		  colnames23[ij]=colnames.get(ij);
			    	  }
			    	  
			    	  String [] ragnames23=new String [icol];
			    	  for (int ij=0;ij<icol;ij++){
			    		  ragnames23[ij]=ragnames.get(ij);
			    	  }
			    	 
			    	  COLNAMES.set(i5, colnames23);
			    	  RANGENAMES.set(i5, ragnames23);
					  data.set(i5, arrayjoin); //replace the original information in the data associated with node
					  jointimes++;
					 
					  
					  break;
				  case NULLSOURCE:
					  break;
				  case UNION: 
					  	  
					  int leftU=indexpl.indexOf(10*in+1);
					  int rigU=indexpl.indexOf(10*in+2);
					 
			          int uupnum=0;
			          int udownnum=0;
			    	  String arrayup[][]=(String [][])data.get(leftU);
			    	  String arraydown[][]=(String [][])data.get(rigU);
			    	  uupnum= arrayup[0].length;
			    	  udownnum=arraydown[0].length;
			    	  
			    	  String arrayunion[][]=new String [arrayup.length+arraydown.length][uupnum];
			    	  
			    	  for (i=0;i<arrayup.length;i++)
			    	  {
			    		  for (j=0;j<arrayup[i].length;j++)
			    		  arrayunion[i][j]=arrayup[i][j];
			    	  }
			    	  for (i=0;i<arraydown.length;i++)
			    	  {
			    		  for (j=0;j<arraydown[i].length;j++)
			    		  arrayunion[arrayup.length+i][j]=arraydown[i][j];
			    	  }
			    	  int iUnion=indexpl.indexOf(in);
			    	  data.set(iUnion,arrayunion);
			    	  if (in==1){
			    	ArrayList<Datum[]> ret3 = new ArrayList<Datum[]>();
			    	for (int i7=0;i7<arrayunion.length;i7++){
			    		Datum [] ret113=new Datum [arrayunion[0].length];// now the datum [] lenth is the number of calculations
						  for (int i13=0;i13<arrayunion[0].length;i13++){
							  ret113[i13]=new Datum.Int(Integer.parseInt(arrayunion[i7][i13]));
						  }
						  ret3.add(ret113);//each row is a datum [] type
			    		//ret3.add(new Datum[] {new Datum.Int(Integer.parseInt(arrayunion[i7][0]))});
					  }
					  return ret3;}
			    	  break;

					  
				  }
			  //}
			  
			  
		 // }  
		  
	  }
	  
	  throw new SqlException("execQuery() is unimplemented"); 
	  }

  public static List<List<Datum[]>> execFile(
      File program
    )
    throws SqlException
    { 
	   try {
		ParserGrammar parse = new ParserGrammar(new java.io.FileInputStream(program));
		
		Map<String, Schema.TableFromFile> tables
	      = new HashMap<String, Schema.TableFromFile>();
		
		List<Datum[]> ret1 = new ArrayList<Datum[]>();
		List<List<Datum[]>> ret2 = new ArrayList<List<Datum[]>>();
		ArrayList<PlanNode> query=new ArrayList<PlanNode>();
		
		try {
			
			query=parse.PARSERSQL(tables);
			for (int t360=0; t360<query.size();t360++){
			ret1= execQuery(tables, query.get(t360));
			ret2.add(ret1);}
			return ret2;
		} catch (ParseException e) {
			// TODO Auto-generated catch block
			e.printStackTrace();
		} 
	} catch (FileNotFoundException e) {
		// TODO Auto-generated catch block
		e.printStackTrace();
	}
	  
	  throw new SqlException("execQuery() is unimplemented"); 
    }
}
